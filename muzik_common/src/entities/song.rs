//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "song")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub youtube_id: Option<String>,
    pub thumbnail_url: Option<String>,
    pub path: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
#[allow(clippy::enum_variant_names)]
pub enum Relation {
    #[sea_orm(has_many = "super::song_album_junction::Entity")]
    SongAlbumJunction,
    #[sea_orm(has_many = "super::song_artist_junction::Entity")]
    SongArtistJunction,
    #[sea_orm(has_many = "super::song_genre_junction::Entity")]
    SongGenreJunction,
    #[sea_orm(has_many = "super::song_youtube_playlist_id_junction::Entity")]
    SongYoutubePlaylistIdJunction,
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        // Relation::Album.def()
        super::song_album_junction::Relation::Album.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::song_album_junction::Relation::Song.def().rev())
    }
}

impl Related<super::artist::Entity> for Entity {
    fn to() -> RelationDef {
        super::song_artist_junction::Relation::Artist.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::song_artist_junction::Relation::Song.def().rev())
    }
}

impl Related<super::genre::Entity> for Entity {
    fn to() -> RelationDef {
        super::song_genre_junction::Relation::Genre.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::song_genre_junction::Relation::Song.def().rev())
    }
}

impl Related<super::youtube_playlist_id::Entity> for Entity {
    fn to() -> RelationDef {
        super::song_youtube_playlist_id_junction::Relation::YoutubePlaylistId.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::song_youtube_playlist_id_junction::Relation::Song
                .def()
                .rev(),
        )
    }
}

impl Related<super::song_album_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongAlbumJunction.def()
    }
}

impl Related<super::song_artist_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongArtistJunction.def()
    }
}

impl Related<super::song_genre_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongGenreJunction.def()
    }
}

impl Related<super::song_youtube_playlist_id_junction::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongYoutubePlaylistIdJunction.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
